// @file mixins.scss

// @link http://csswizardry.com/2016/02/mixins-better-for-performance/

// Provide a hover effect for non-touch devices, turn it into an Active state for mobile, and maintain a fallback.
// @requires Modernizr as a JS dependency to get .no-touch classes
// Adds styles via @content
// @jhogue
//
$modernizr-touch-off: 'no-touch';
$modernizr-touch-on: 'touch';

@mixin touch-hover( $disabled: false ) {
	
	@if $disabled {
		.no-js &,
		.no-js &:hover, // the fallback
		.no-js &:focus,
		.js.#{$modernizr-touch-off} &,
		.js.#{$modernizr-touch-off} &:hover, // enhanced for no-touch
		.js.#{$modernizr-touch-off} &:focus,
		.js.#{$modernizr-touch-on} &,
		.js.#{$modernizr-touch-on} &:active { // relay same styles to active for touch devices
			@content;
		}
	} @else {
		.no-js &:hover, // the fallback
		.no-js &:focus,
		.js.#{$modernizr-touch-off} &:hover, // enhanced for no-touch
		.js.#{$modernizr-touch-off} &:focus,
		.js.#{$modernizr-touch-on} &:active { // relay same styles to active for touch devices
			@content;
		}
  }
}

// Column Grid
// Simple mixin to display the grid - options are either 2, 3, or 4
// @param number of columns
// @usage column-grid(2)
// @johncionci
@mixin column-grid( $columns: null ) {
	@if $columns == 3 {
		@include span-columns(4);
	} @else if $columns == 4 {
		@include span-columns(3);
	} @else {
		@include span-columns(6);
	}
}

// List Reset
// Remove the margin, padding, and bullets from lists
// @johncionci
//
@mixin list-reset() {
	list-style: none;
	margin: 0;
	padding: 0;
}

// Mixins for accessible show/hide
// @jhogue
@mixin hide() {
    display: none;
    visibility: hidden;
}

@mixin show( $display: block ) {
    display: $display;
    visibility: visible;
}


// Make it quick and easy to apply a relative container
@mixin relative-container( $o: hidden, $z: 1 ) {
	overflow: $o;
	position: relative;
	z-index: $z;
}


// Maintain ratio mixin. Great for responsive grids, or videos.
// "Crops" the element to the size of the container with overflow: hidden
// https://gist.github.com/brianmcallister/2932463
// $ratio - Ratio the element needs to maintain.
// Example: A 16:9 ratio would look like this: .element { @include maintain-ratio(16 9); }
// @jhogue
@mixin maintain-ratio($ratio: 1 1) {
	@if length($ratio) < 2 or length($ratio) > 2 {
		@warn "$ratio must be a list with two values.";
	}
	$width: 100%;
	$height: percentage(nth($ratio, 2) / nth($ratio, 1));

	width: $width;
	height: 0;
	padding-bottom: $height;
}

// Apply as a typical container mixin
@mixin proportional-container( $ratio: 1 1 ) {
	position: relative;
	overflow: hidden;
	z-index: 1;
	@include maintain-ratio( $ratio );
}

@mixin proportional-element( $min: true ) {
	position: absolute;
		top: 0; left:0;
	z-index: 2;
	@if ($min) {
		min-width: 100% !important;
		min-height: 100% !important;
	} @else {
		width: 100% !important;
		height: 100% !important;
	}
}


// Provide REM and PX fallback for any property
// Gulp used to do this for us, but Brunch does not
// @accepts: css property, numeric value
// @requires: value must be a pixel value, stripped of its unit
// @dependson: px(), a function of ours, and rem(), a function of Bourbon
// @returns: two property values, one with px, one with rem units
// @jhogue
@mixin rem($property, $value) {
	$number: strip-units($value * 1);
	$declaration: unquote($property);
	// scss-lint:disable DuplicateProperty
	#{$declaration}: px($number);
	#{$declaration}: rem($number);
}
// Alias of the above
@mixin rem-fontsize($value) {
	@include rem('font-size', $value);
}


// Output a little 'tag' on the body:after content
// @accepts: string
// @requires: $content string should be in single quotes
// @returns: entire body pseudo-class declaration
// @usage: @include javascript_tag( 'actionhook' );
// @jhogue
@mixin javascript-tag( $content ) {
	body:after {
		content: $content; 
		display: none; 
		speak: none; 
	}
}